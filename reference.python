#!/usr/bin/env python
   
   Example python to authenticate against an object store, create a new container, store text object, retrieve it, delete object, delete container.
   
   
   import httplib
   import json
   import sys
   import time
   import os
   import logging
   
   # Init a simple logger...
   logging.basicConfig(level=logging.INFO)
   console = logging.StreamHandler()
   console.setLevel(logging.DEBUG)
   logger = logging.getLogger()
   logger.addHandler(console)
   
   # hosts
   HOST_AUTH = 'cloud.lab.fiware.org:4730'
   
   TEST_CONTAINER_NAME = 'TestContainerPython'
   TEST_OBJECT_NAME = 'TestObjectPython.txt'
   TEST_TEXT = 'Hello SWIFT World'
   
   def authentication_request(username, password):
       
       Request authentication of user
       
       conn = httplib.HTTPConnection(HOST_AUTH)
   
       # retrieve initial token
       headers = {'Content-Type': 'application/json'}
       body = '{"auth": {"passwordCredentials":{"username": "'+username+'", "password": "'+password+'"}}}'
       conn.request("POST", "/v2.0/tokens", body, headers)
       response = conn.getresponse()
       data = response.read()
       datajson = json.loads(data)
       initialtoken = datajson['access']['token']['id']
   
       logger.info('Initial Token is: ' + initialtoken)
   
       # retrieve tenant
       headers = {'x-auth-token': initialtoken}
       conn.request("GET", "/v2.0/tenants", None, headers)
       response = conn.getresponse()
       data = response.read()
       datajson = json.loads(data)
       tenant = datajson['tenants'][0]['id']
   
       logger.info('Tenant is: ' + tenant)
   
       # retrieve authentication json
       headers = {'Content-Type': 'application/json'}
       body = '{"auth": {"tenantId": "'+tenant+'", "passwordCredentials":{"username": "'+username+'", "password": "'+password+'"}}}'
       conn.request("POST", "/v2.0/tokens", body, headers)
       response = conn.getresponse()
       data = response.read()
   
       return json.loads(data)
   
   
   def swift_request(verb, url, headers, body):
       
       Do a HTTP request defined by HTTP verb, a Url, a dict of headers and a body.
       
       logger.info('swift_request verb is: ' + verb)
       substring = url[url.find("//")+2:]
       marker = substring.find("/")
       host = substring[:marker]
       resource = substring[marker:]
       logger.info('host is: ' + host)
       logger.info('resource is: ' + resource)
       conn = httplib.HTTPConnection(host)
       conn.request(verb, resource, body, headers)
       response = conn.getresponse()
   
       if response.status not in [200, 201, 202, 204]:
           logger.error(response.reason)
           logger.warn(response.read())
           sys.exit(1)
   
       result = "Status: " + str(response.status) + ", Reason: " + response.reason + ", Body: " +  response.read()   
   
       conn.close()
   
       return result
   
   
   def create_container(token, auth, name):
       headers = {"X-Auth-Token": token}
       body = None
       url = auth + "/" + name
   
       return swift_request('PUT', url, headers, body)
   
   
   def list_container(token, auth, name):
       headers = {"X-Auth-Token": token}
       body = None
       url = auth + "/" + name
   
       return swift_request('GET', url, headers, body)
   
   
   def store_text(token, auth, container_name, object_name, object_text):
       headers = {"X-Auth-Token": token}
       #body = '{"mimetype":"text/plain", "metadata":{}, "value" : "' + object_text + '"}'
       body = object_text
       url = auth + "/" + container_name + "/" + object_name
   
       return swift_request('PUT', url, headers, body)
   
   
   def retrieve_text(token, auth, container_name, object_name):
       headers = {"X-Auth-Token": token}
       body = None
       url = auth + "/" + container_name + "/" + object_name
   
       return swift_request('GET', url, headers, body)
   
   
   def delete_object(token, auth, container_name, object_name):
       headers = {"X-Auth-Token": token}
       body = None
       url = auth + "/" + container_name + "/" + object_name
   
       return swift_request('DELETE', url, headers, body)
   
   
   def delete_container(token, auth, container_name):
       headers = {"X-Auth-Token": token}
       body = None
       url = auth + "/" + container_name
   
       return swift_request('DELETE', url, headers, body)
   
   
   if __name__ == '__main__':
       if len(sys.argv) < 3:
           print 'Usage: example.py <username> <password>'
           sys.exit(128)
   
       username = sys.argv[1]
       password = sys.argv[2]
       logger.info('username is: ' + username)
       logger.info('password is: ' + password)
   
       # display basic info
       logger.info('Authorisation host is: ' + HOST_AUTH)
   
       # get authentication response
       auth_response = authentication_request(username, password)
   
       # extract token
       token = auth_response['access']['token']['id']
       logger.info('Security token is: ' + token)
   
       # extract authentication string required for addressing users resources
       for i in auth_response['access']['serviceCatalog']:
       if i['name'] == 'swift':
                   # may take here any of the available entries that works
           auth_url = i['endpoints'][1]['publicURL']
            break
   
       logger.info('auth_url is: ' + auth_url)
   
       # perform some basic Object Store operations
   
       response = create_container(token, auth_url, TEST_CONTAINER_NAME)
       logger.info('Create Container Response: ' + response)
   
       response = list_container(token, auth_url, TEST_CONTAINER_NAME)
       logger.info('List Container Response: ' + response)
   
       response = store_text(token, auth_url, TEST_CONTAINER_NAME, TEST_OBJECT_NAME, TEST_TEXT)
       logger.info('Store Text Response: ' + response)
   
       response = list_container(token, auth_url, TEST_CONTAINER_NAME)
       logger.info('List Container Response: ' + response)
   
       response = retrieve_text(token, auth_url, TEST_CONTAINER_NAME, TEST_OBJECT_NAME)
       logger.info('Retrieve Text Response: ' + response)
   
       response = delete_object(token, auth_url, TEST_CONTAINER_NAME, TEST_OBJECT_NAME)
       logger.info('Delete Object Response: ' + response)
   
       response = list_container(token, auth_url, TEST_CONTAINER_NAME)
       logger.info('List Container Response: ' + response)
   
       response = delete_container(token, auth_url, TEST_CONTAINER_NAME)
       logger.info('Delete Container Response: ' + response)
